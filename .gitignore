# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
pyvenv.cfg
bin/activate
bin/activate.csh
bin/activate.fish
bin/Activate.ps1
bin/convert-caffe2-to-onnx
bin/convert-onnx-to-caffe2
bin/docutils
bin/dotenv
bin/f2py
bin/f2py3
bin/f2py3.9
bin/faker
bin/fonttools
bin/httpx
bin/huggingface-cli
bin/isympy
bin/langchain-server
bin/markdown-it
bin/nltk
bin/normalizer
bin/pip
bin/pip3
bin/pip3.9
bin/publish.py
bin/pyftmerge
bin/pyftsubset
bin/pygmentize
bin/python
bin/python3
bin/python3.9
bin/rouge-metric
bin/rst2html.py
bin/rst2html4.py
bin/rst2html5.py
bin/rst2latex.py
bin/rst2man.py
bin/rst2odt_prepstyles.py
bin/rst2odt.py
bin/rst2pseudoxml.py
bin/rst2s5.py
bin/rst2xetex.py
bin/rst2xml.py
bin/rstpep2html.py
bin/torchrun
bin/tqdm
bin/transformers-cli
bin/ttx
bin/uvicorn
bin/watchfiles
share/doc/networkx-3.1/LICENSE.txt
share/doc/networkx-3.1/examples/README.txt
share/doc/networkx-3.1/examples/3d_drawing/mayavi2_spring.py
share/doc/networkx-3.1/examples/3d_drawing/plot_basic.py
share/doc/networkx-3.1/examples/3d_drawing/README.txt
share/doc/networkx-3.1/examples/algorithms/hartford_drug.edgelist
share/doc/networkx-3.1/examples/algorithms/plot_beam_search.py
share/doc/networkx-3.1/examples/algorithms/plot_betweenness_centrality.py
share/doc/networkx-3.1/examples/algorithms/plot_blockmodel.py
share/doc/networkx-3.1/examples/algorithms/plot_circuits.py
share/doc/networkx-3.1/examples/algorithms/plot_davis_club.py
share/doc/networkx-3.1/examples/algorithms/plot_dedensification.py
share/doc/networkx-3.1/examples/algorithms/plot_girvan_newman.py
share/doc/networkx-3.1/examples/algorithms/plot_iterated_dynamical_systems.py
share/doc/networkx-3.1/examples/algorithms/plot_krackhardt_centrality.py
share/doc/networkx-3.1/examples/algorithms/plot_maximum_independent_set.py
share/doc/networkx-3.1/examples/algorithms/plot_parallel_betweenness.py
share/doc/networkx-3.1/examples/algorithms/plot_rcm.py
share/doc/networkx-3.1/examples/algorithms/plot_snap.py
share/doc/networkx-3.1/examples/algorithms/plot_subgraphs.py
share/doc/networkx-3.1/examples/algorithms/README.txt
share/doc/networkx-3.1/examples/algorithms/WormNet.v3.benchmark.txt
share/doc/networkx-3.1/examples/basic/plot_properties.py
share/doc/networkx-3.1/examples/basic/plot_read_write.py
share/doc/networkx-3.1/examples/basic/plot_simple_graph.py
share/doc/networkx-3.1/examples/basic/README.txt
share/doc/networkx-3.1/examples/drawing/chess_masters_WCC.pgn.bz2
share/doc/networkx-3.1/examples/drawing/knuth_miles.txt.gz
share/doc/networkx-3.1/examples/drawing/plot_center_node.py
share/doc/networkx-3.1/examples/drawing/plot_chess_masters.py
share/doc/networkx-3.1/examples/drawing/plot_custom_node_icons.py
share/doc/networkx-3.1/examples/drawing/plot_degree.py
share/doc/networkx-3.1/examples/drawing/plot_directed.py
share/doc/networkx-3.1/examples/drawing/plot_edge_colormap.py
share/doc/networkx-3.1/examples/drawing/plot_ego_graph.py
share/doc/networkx-3.1/examples/drawing/plot_eigenvalues.py
share/doc/networkx-3.1/examples/drawing/plot_four_grids.py
share/doc/networkx-3.1/examples/drawing/plot_house_with_colors.py
share/doc/networkx-3.1/examples/drawing/plot_knuth_miles.py
share/doc/networkx-3.1/examples/drawing/plot_labels_and_colors.py
share/doc/networkx-3.1/examples/drawing/plot_multipartite_graph.py
share/doc/networkx-3.1/examples/drawing/plot_node_colormap.py
share/doc/networkx-3.1/examples/drawing/plot_rainbow_coloring.py
share/doc/networkx-3.1/examples/drawing/plot_random_geometric_graph.py
share/doc/networkx-3.1/examples/drawing/plot_sampson.py
share/doc/networkx-3.1/examples/drawing/plot_selfloops.py
share/doc/networkx-3.1/examples/drawing/plot_simple_path.py
share/doc/networkx-3.1/examples/drawing/plot_spectral_grid.py
share/doc/networkx-3.1/examples/drawing/plot_tsp.py
share/doc/networkx-3.1/examples/drawing/plot_unix_email.py
share/doc/networkx-3.1/examples/drawing/plot_weighted_graph.py
share/doc/networkx-3.1/examples/drawing/README.txt
share/doc/networkx-3.1/examples/drawing/unix_email.mbox
share/doc/networkx-3.1/examples/graph/plot_dag_layout.py
share/doc/networkx-3.1/examples/graph/plot_degree_sequence.py
share/doc/networkx-3.1/examples/graph/plot_erdos_renyi.py
share/doc/networkx-3.1/examples/graph/plot_expected_degree_sequence.py
share/doc/networkx-3.1/examples/graph/plot_football.py
share/doc/networkx-3.1/examples/graph/plot_karate_club.py
share/doc/networkx-3.1/examples/graph/plot_morse_trie.py
share/doc/networkx-3.1/examples/graph/plot_mst.py
share/doc/networkx-3.1/examples/graph/plot_napoleon_russian_campaign.py
share/doc/networkx-3.1/examples/graph/plot_roget.py
share/doc/networkx-3.1/examples/graph/plot_triad_types.py
share/doc/networkx-3.1/examples/graph/plot_words.py
share/doc/networkx-3.1/examples/graph/README.txt
share/doc/networkx-3.1/examples/graph/roget_dat.txt.gz
share/doc/networkx-3.1/examples/graph/words_dat.txt.gz
share/doc/networkx-3.1/examples/subclass/plot_antigraph.py
share/doc/networkx-3.1/examples/subclass/plot_printgraph.py
share/doc/networkx-3.1/examples/subclass/README.txt
share/man/man1/isympy.1
share/man/man1/ttx.1
